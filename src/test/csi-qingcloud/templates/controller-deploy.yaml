#  Copyright (C) 2018 Yunify, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this work except in compliance with the License.
#  You may obtain a copy of the License in the LICENSE file, or at:
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

kind: Deployment
apiVersion: apps/v1
metadata:
  name: csi-qingcloud-controller
  namespace: {{ .Release.Namespace }}
  labels:
    app: csi-qingcloud
    role: controller
    owner: yunify
    ver: {{ include "driver.version" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: csi-qingcloud
      role: controller
      owner: yunify
      ver: {{ include "driver.version" . }}
  template:
    metadata:
      labels:
        app: csi-qingcloud
        role: controller
        owner: yunify
        ver: {{ include "driver.version" . }}
    spec:
      serviceAccount: csi-qingcloud-controller
      containers:
      - name: csi-provisioner
        image: "{{ .Values.provisioner.repository }}:{{ .Values.provisioner.tag }}"
        resources:
          limits:
            memory: "{{ .Values.provisioner.resources.limits.memory }}"
            cpu: "{{ .Values.provisioner.resources.limits.cpu }}"
          requests:
            memory: "{{ .Values.provisioner.resources.requests.memory }}"
            cpu: "{{ .Values.provisioner.resources.requests.cpu }}"
        args:
        - "--csi-address=$(ADDRESS)"
        - "--leader-election"
        - "--feature-gates=Topology=true"
        - "--retry-interval-max=5m"
        - "--retry-interval-start=5s"
        - "--timeout=90s"
        - "--worker-threads=5"
        - "--volume-name-prefix={{ .Values.provisioner.volumeNamePrefix }}"
        - "--v=5"
        env:
        - name: ADDRESS
          value: /csi/csi.sock
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
      - name: csi-attacher
        image: "{{ .Values.attacher.repository }}:{{ .Values.attacher.tag }}"
        resources:
          limits:
            memory: "{{ .Values.attacher.resources.limits.memory }}"
            cpu: "{{ .Values.attacher.resources.limits.cpu }}"
          requests:
            memory: "{{ .Values.attacher.resources.requests.memory }}"
            cpu: "{{ .Values.attacher.resources.requests.cpu }}"
        args:
        - "--csi-address=$(ADDRESS)"
        - "--leader-election"
        - "--retry-interval-max=5m"
        - "--retry-interval-start=5s"
        - "--timeout=90s"
        - "--worker-threads=5"
        - "--v=5"
        env:
        - name: ADDRESS
          value: /csi/csi.sock
        - name: MY_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
{{- if semverCompare ">=1.17" .Capabilities.KubeVersion.GitVersion }}
      - name: csi-snapshotter
        image: "{{ .Values.snapshotter.repository }}:{{ .Values.snapshotter.tag }}"
        resources:
          limits:
            memory: "{{ .Values.snapshotter.resources.limits.memory }}"
            cpu: "{{ .Values.snapshotter.resources.limits.cpu }}"
          requests:
            memory: "{{ .Values.snapshotter.resources.requests.memory }}"
            cpu: "{{ .Values.snapshotter.resources.requests.cpu }}"
        args:
          - "--csi-address=$(ADDRESS)"
          - "--leader-election=false"
          - "--v=5"
        env:
          - name: ADDRESS
            value: /csi/csi.sock
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
          - name: socket-dir
            mountPath: /csi
{{- end }}
{{- if semverCompare ">=1.15" .Capabilities.KubeVersion.GitVersion }}
      - name: csi-resizer
        image: "{{ .Values.resizer.repository }}:{{ .Values.resizer.tag }}"
        resources:
          limits:
            memory: "{{ .Values.resizer.resources.limits.memory }}"
            cpu: "{{ .Values.resizer.resources.limits.cpu }}"
          requests:
            memory: "{{ .Values.resizer.resources.requests.memory }}"
            cpu: "{{ .Values.resizer.resources.requests.cpu }}"
        args:
          - "--csi-address=$(ADDRESS)"
          - "--leader-election"
          - "--v=5"
        env:
          - name: ADDRESS
            value: /csi/csi.sock
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
          - name: socket-dir
            mountPath: /csi
{{- end }}
      - name: csi-qingcloud
        image: "{{ .Values.driver.repository }}:{{ include "driver.version" . }}"
        resources:
          limits:
            memory: "{{ .Values.controller.resources.limits.memory }}"
            cpu: "{{ .Values.controller.resources.limits.cpu }}"
          requests:
            memory: "{{ .Values.controller.resources.requests.memory }}"
            cpu: "{{ .Values.controller.resources.requests.cpu }}"
        args :
          - "--config=/etc/config/config.yaml"
          - "--drivername={{ .Values.driver.name }}"
          - "--endpoint=$(CSI_ENDPOINT)"
          - "--maxvolume={{ .Values.driver.maxVolume }}"
          - "--retry-detach-times-max={{ .Values.driver.retryDetachTimesMax }}"
          - "--nodeid=$(NODE_ID)"
          - "--v=5"
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CSI_ENDPOINT
          value: unix://csi/csi.sock
        imagePullPolicy: {{ .Values.driver.pullPolicy }}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
        - name: server-config
          mountPath: /etc/config
      volumes:
      - name: socket-dir
        emptyDir:
      - name: server-config
        configMap:
          name: csi-qingcloud